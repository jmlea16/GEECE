//Google Earth Engine CMIP6 Explorer 0.05
//Â© Copyright, Dr James Lea, University of Liverpool 2023. All Rights Reserved.
//Email: j.lea@liverpool.ac.uk

Map.setCenter(0,0,1.5);

var restartScript=function(){
  Map.clear();
  Map.add(clearMapPanel);
  var geometry;
  var drawingTools=Map.drawingTools();
  drawingTools.layers().reset();
  drawingTools.clear();
  drawingTools.setShown(false);
  
  var inputVars=ee.Dictionary.fromLists([
    'dateStart','dateEnd','monthStart','monthEnd',
    'dataset',
    'tableAsciivalue','initialGridROI','gridMatchROI',
    'siteNames','transform','crs','initialGeom','geomType',
    'imColl','closestGrid','reducer','analysisROI',
    'description','simulationsSelected','variablesSelected',
    'outputType','scenario'
    ],
    ['1950-01-01','2015-01-01',1,12,
      0,
      0,null,null,
      [],[0.25,0,-180,0,-0.25,90],'EPSG:4326',null,null,
      null,null,[],null,
      '',[],[],'individual','historical']);
  
  //Sets up main menu panel
  var mainPanel=ui.Panel({
      style: {
      width:'33.33%', 
      position:'top-left'
      }
    });
  
  if(ui.root.widgets().length()===2){
     ui.root.remove(ui.root.widgets().get(0));//adds panel to root (*not* Map)
  }
  ui.root.insert(0,mainPanel);
  
  //Set up panel to select simulations (inputs defined dynamically below)
  var simulationPanel=ui.Panel({
        style: {
        width:'33.33%',
        position:'top-right',
        shown:true
        }
      });
  var simulationLabelTitle=ui.Label('Select simulation(s):',{//fontSize: '15px',
          margin: '1px 20px 1px 50px',
          fontWeight: 'bold'});
  var simulationLabel1=ui.Label('Simulations highlighted in blue do not have output for one or more variables. Requesting output from these simulations where it does not exist may result in errors.',{//fontSize: '15px',
          margin: '1px 20px 1px 50px'
  });
  var simulationLabel2=ui.Label('For more information, click here to see output descriptions.',{//fontSize: '15px',
          margin: '1px 20px 1px 50px',textDecoration:'underline',color:'blue'})
          .setUrl('https://developers.google.com/earth-engine/datasets/catalog/NASA_GDDP-CMIP6#bands');
  var simulationSelect=ui.Button({label:'Click to select simulations',
     disabled:false,
     style:{margin: '1px 50px 1px 50px',stretch:'horizontal'}
  });
  var simulationSelectClose=ui.Button({label:'Ok',
     disabled:false,
     style:{margin: '5px 50px 1px 50px',stretch:'horizontal'}
  });
  var simulationSelectAll=ui.Button({label:'Select all',
     disabled:false,
     style:{margin: '10px 50px 1px 50px',stretch:'horizontal'}
  });
  var simulationUnselectAll=ui.Button({label:'Unselect all',
     disabled:false,
     style:{margin: '10px 50px 1px 50px',stretch:'horizontal'}
  });
  var errorSelectMessage=ui.Panel({
                      style: {
                      position: 'top-center',
                      shown:false
                      }
                    });
  var errorSelectMessageLabel=ui.Label('Please select at least one option');
  errorSelectMessage.add(errorSelectMessageLabel);
  Map.add(errorSelectMessage);
  
  
  simulationPanel.add(simulationLabelTitle).add(simulationLabel1)
      .add(simulationLabel2).add(simulationSelectAll).add(simulationUnselectAll);
  var simulationList=['ACCESS-CM2', 'ACCESS-ESM1-5','CMCC-CM2-SR5', 'CMCC-ESM2', 
      'CNRM-CM6-1', 'CNRM-ESM2-1', 'CanESM5',
      'EC-Earth3', 'EC-Earth3-Veg-LR', 'FGOALS-g3', 'GFDL-CM4',
      'GFDL-ESM4', 'GISS-E2-1-G', 'HadGEM3-GC31-LL', 'HadGEM3-GC31-MM',
      'INM-CM4-8', 'INM-CM5-0', 'KACE-1-0-G', 
      'MIROC-ES2L',  'MPI-ESM1-2-HR', 'MPI-ESM1-2-LR', 'MRI-ESM2-0',
       'NorESM2-MM',  'UKESM1-0-LL'];
  var incompleteSims=['BCC-CSM2-MR','CESM2', 'CESM2-WACCM','IITM-ESM','IPSL-CM6A-LR','KIOST-ESM',
      'MIROC6','NESM3','NorESM2-LM', 'TaiESM1']
  ee.List([simulationList,incompleteSims]).evaluate(function(result1){
            //update button display
            inputVars=inputVars.set('simulationsSelected',result1);
            // variableSelect.setLabel(result1.length+' variables selected');
            var simulationList=result1[0];
            var incompleteSims=result1[1];
            var simulationCheckboxes;
            var selectedSimulations=[];
            var addRemoveSelectedSimulations=function(value){
              
                var simulationsOut=ee.List(simulationCheckboxes.map(function(checkbox){
                  var selectedSimulations1=[];
                  if(checkbox.getValue()===true){
                    selectedSimulations1=checkbox.getLabel();
                  } 
                  return selectedSimulations1;
                }));
                inputVars=inputVars.set('simulationsSelected',simulationsOut.distinct().remove([]));
              } ;
            //update panel display
            var checkbox;
            simulationCheckboxes=simulationList.map(function(varName){
              checkbox=ui.Checkbox({label:varName,
                                        value:true,
                                        style:{margin: '1px 50px 1px 50px'},
                                        onChange:addRemoveSelectedSimulations
                                      });
              simulationPanel.add(checkbox);
              return checkbox;
            });
            
            var incompleteSimsCheckboxes=incompleteSims.map(function(varName){
              checkbox=ui.Checkbox({label:varName,
                                        value:true,
                                        style:{margin: '1px 50px 1px 50px',
                                              color:'blue'
                                        },
                                        onChange:addRemoveSelectedSimulations
                                      });
              simulationPanel.add(checkbox);
              return checkbox;
            });
            simulationCheckboxes=simulationCheckboxes.concat(incompleteSimsCheckboxes)
            print(simulationCheckboxes)
            simulationPanel.add(simulationSelectClose);
            checkbox.onChange(addRemoveSelectedSimulations);
            
            //select all variables
            simulationSelectAll.onClick(function(){
              simulationCheckboxes.map(function(checkbox){
                checkbox.setValue(true);
              });
              var simulationsOut=ee.List(simulationCheckboxes.map(function(checkbox){
                    selectedSimulations=checkbox.getLabel();
                  return selectedSimulations;
                }));
                inputVars=inputVars.set('simulationsSelected',simulationsOut.distinct());
            });
            simulationUnselectAll.onClick(function(){
              simulationCheckboxes.map(function(checkbox){
                checkbox.setValue(false);
              });
              inputVars=inputVars.set('simulationsSelected',[]);
            });
            
            // variableCheck
            simulationSelect.onClick(function(){
              simulationSelectClose.setDisabled(false);
              if(ui.root.widgets().length()===3){
                 ui.root.remove(ui.root.widgets().get(1));//adds panel to root (*not* Map)
              }
              ui.root.remove(ui.root.widgets().get(0));
              ui.root.insert(0,simulationPanel);
            });
            simulationSelectClose.onClick(function(){
              print(ee.List(inputVars.get('simulationsSelected')));
                ee.List(inputVars.get('simulationsSelected')).evaluate(function(list){
                  if(list.length>0){
                    errorSelectMessage.style().set({shown:false});
                    simulationSelectClose.setDisabled(true);
                    if (list.length===1){
                      simulationSelect.setLabel(list.length+' simulation selected');
                    } else {
                      simulationSelect.setLabel(list.length+' simulations selected');
                    }
                    if(ui.root.widgets().length()===3){
                       ui.root.remove(ui.root.widgets().get(1));//adds panel to root (*not* Map)
                    }
                    ui.root.remove(ui.root.widgets().get(0));
                    ui.root.insert(0,mainPanel);
                    
                  } else {
                    errorSelectMessage.style().set({shown:true});
                }
              
              });
              
              selectedSimulations=[];
              
            });
      });
      
  //Set up variables panel
  var variablePanel=ui.Panel({
        style: {
        width:'33.33%',
        position:'top-right',
        shown:true
        }
      });
  var variableLabelTitle=ui.Label('Select variable(s):',{//fontSize: '15px',
          margin: '1px 20px 1px 50px',
          fontWeight: 'bold'});
  var variableSelect=ui.Button({label:'Click to select variables',
     disabled:false,
     style:{margin: '1px 50px 1px 50px',stretch:'horizontal'}
  });
  var variableSelectClose=ui.Button({label:'Ok',
     disabled:false,
     style:{margin: '5px 50px 1px 50px',stretch:'horizontal'}
  });
  var variableSelectAll=ui.Button({label:'Select all',
     disabled:false,
     style:{margin: '10px 50px 1px 50px',stretch:'horizontal'}
  });
  var variableUnselectAll=ui.Button({label:'Unselect all',
     disabled:false,
     style:{margin: '10px 50px 1px 50px',stretch:'horizontal'}
  });
  
  
  variablePanel.add(variableLabelTitle).add(variableSelectAll).add(variableUnselectAll);
  var variableList=['hurs','huss','pr','rlds','rsds','sfcWind','tas','tasmax','tasmin'];
  ee.List(variableList).evaluate(function(result1){
            //update button display
            inputVars=inputVars.set('variablesSelected',ee.List(result1));
            // variableSelect.setLabel(result1.length+' variables selected');
            var variableCheckboxes;
            var selectedVariables=[];
            var addRemoveSelectedVariables=function(value){
              
                var variablesOut=ee.List(variableCheckboxes.map(function(checkbox){
                  var selectedVariables1=[];
                  if(checkbox.getValue()===true){
                    selectedVariables1=checkbox.getLabel();
                  } 
                  return selectedVariables1;
                }));
                inputVars=inputVars.set('variablesSelected',variablesOut.distinct().remove([]));
              } ;
            //update panel display
            var checkbox;
            variableCheckboxes=result1.map(function(varName){
              checkbox=ui.Checkbox({label:varName,
                                        value:true,
                                        style:{margin: '1px 50px 1px 50px'},
                                        onChange:addRemoveSelectedVariables
                                      });
              variablePanel.add(checkbox);
              return checkbox;
            });
            variablePanel.add(variableSelectClose);
            checkbox.onChange(addRemoveSelectedVariables);
            
            //select all variables
            variableSelectAll.onClick(function(){
              variableCheckboxes.map(function(checkbox){
                checkbox.setValue(true);
              });
              var variablesOut=ee.List(variableCheckboxes.map(function(checkbox){
                    selectedVariables=checkbox.getLabel();
                  return selectedVariables;
                }));
                inputVars=inputVars.set('variablesSelected',variablesOut.distinct());
            });
            variableUnselectAll.onClick(function(){
              variableCheckboxes.map(function(checkbox){
                checkbox.setValue(false);
              });
              inputVars=inputVars.set('variablesSelected',[]);
            });
            
            // variableCheck
            variableSelect.onClick(function(){
              variableSelectClose.setDisabled(false);
              if(ui.root.widgets().length()===3){
                 ui.root.remove(ui.root.widgets().get(1));//adds panel to root (*not* Map)
              }
              ui.root.remove(ui.root.widgets().get(0));
              ui.root.insert(0,variablePanel);
            });
            variableSelectClose.onClick(function(){
              startDateBox.setDisabled(false);
              endDateBox.setDisabled(false);
              select1.setDisabled(false);
              select2.setDisabled(false);
              print(ee.List(inputVars.get('variablesSelected')));
                ee.List(inputVars.get('variablesSelected')).evaluate(function(list){
                  if(list.length>0){
                    errorSelectMessage.style().set({shown:false});
                    variableSelectClose.setDisabled(true);
                    if (list.length===1){
                      variableSelect.setLabel(list.length+' variable selected');
                    } else {
                      variableSelect.setLabel(list.length+' variables selected');
                    }
                    if(ui.root.widgets().length()===3){
                       ui.root.remove(ui.root.widgets().get(1));//adds panel to root (*not* Map)
                    }
                    ui.root.remove(ui.root.widgets().get(0));
                    ui.root.insert(0,mainPanel);
                    
                  } else {
                    errorSelectMessage.style().set({shown:true});
                }
              
              });
              
              selectedVariables=[];
              
            });
      });
  
  
  
  
  
       
  ////////////////////////////////////////////////////////////////
  Map.setOptions("SATELLITE");
  Map.style().set('cursor', 'crosshair');
  
  //Set up panel labels and options
  var welcomeTitle=ui.Label({
        value: 'GEE CMIP6 Explorer (GEECE) version 0.05',
        style: {
          margin: '1px 10px 1px 10px',
          fontSize: '20px',
          fontWeight: 'bold',
          textAlign:'center',
          stretch:'horizontal'
          }
      });
  var welcomeSubtitle=ui.Label({value:'Written by James M. Lea, University of Liverpool',
        style: {
          margin: '1px 10px 1px 10px',
          fontSize: '12px',
          textAlign:'center',
          stretch:'horizontal'
          }});
  var welcomeSubtitle1a=ui.Label({value:'For educational and research purposes only.',
        style: {
          margin: '1px 10px 1px 10px',
          fontSize: '12px',
          fontWeight:'bold',
          textAlign:'center',
          stretch:'horizontal'
          }});
  var welcomeSubtitle1b=ui.Label({value:'For commercial applications or other uses, contact below.',
        style: {
          margin: '1px 10px 1px 10px',
          fontSize: '12px',
          fontWeight:'bold',
          textAlign:'center',
          stretch:'horizontal'
          }});
  var welcomeSubtitle1=ui.Label({value:'Twitter: @JamesMLea',
        style: {
          margin: '1px 10px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontWeight:'bold',
          fontSize: '12px',
          color:'blue'
          }}).setUrl('https://twitter.com/JamesMLea');
  var welcomeSubtitle2=ui.Label({value:'If you use this tool, cite:',
        style: {
          margin: '10px 10px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontSize: '12px',
          fontWeight:'bold'
          }});
  var welcomeSubtitle2a=ui.Label({value:['Lea et al. (2024). Making climate reanalysis and CMIP6 data processing easy: two âpoint-and-clickâ cloud based user interfaces for environmental and ecological studies. Frontiers in Environmental Science, Vol. 12, doi: 10.3389/fenvs.2024.1294446'],
        style: {
          margin: '1px 10px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontSize: '12px',
          fontWeight:'bold',
          //textDecoration:'underline'
          }}).setUrl('https://doi.org/10.3389/fenvs.2024.1294446');
  var welcomeSubtitle2b=ui.Label({value:'AND',
        style: {
          margin: '1px 10px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontSize: '12px',
          fontWeight:'bold'
          }})
  var welcomeSubtitle2c=ui.Label({value:'Thrasher et al., 2012, HESS, 16 (9), 3309-3314.',
        style: {
          margin: '1px 10px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontSize: '12px',
          fontWeight:'bold'
          }}).setUrl('https://hess.copernicus.org/articles/16/3309/2012/');
  var welcomeSubtitle2d=ui.Label({value:'AND',
        style: {
          margin: '1px 10px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontSize: '12px',
          fontWeight:'bold'
          }});
  var welcomeSubtitle2e=ui.Label({value:'follow CMIP6 Terms of Use',
        style: {
          margin: '1px 10px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontSize: '12px',
          fontWeight:'bold'
          }}).setUrl('https://pcmdi.llnl.gov/CMIP6/TermsOfUse/TermsOfUse6-2.html');
  var welcomeSubtitle3=ui.Label({value:'Email: j.lea@liverpool.ac.uk',
        style: {
          margin: '1px 15px 1px 10px',
          textAlign:'center',
          stretch:'horizontal',
          fontWeight:'bold',
          fontSize: '12px',
          color:'blue'
          }}).setUrl('mailto:j.lea@liverpool.ac.uk');
  // var welcomeSubtitle4=ui.Label({value:'Lea, 2018, Earth Surface Dynamics (link)',
  //       style: {
  //         margin: '1px 10px 1px 10px',
  //         textAlign: 'center',
  //         fontSize: '12px'
  //       }}).setUrl('https://doi.org/10.5194/esurf-6-551-2018');
  
  mainPanel.add(welcomeTitle).add(welcomeSubtitle).add(welcomeSubtitle1a).add(welcomeSubtitle1b)
    .add(welcomeSubtitle1).add(welcomeSubtitle3).add(welcomeSubtitle2).add(welcomeSubtitle2a)
    // .add(welcomeSubtitle2b).add(welcomeSubtitle2c)
    .add(welcomeSubtitle2d).add(welcomeSubtitle2e);
    //.add(welcomeSubtitle4)
  
  //1. Dataset options
  var timescaleLabel=ui.Label('1. Select simulation scenario:',
          {margin: '15px 50px 1px 50px',
          fontWeight: 'bold'});
  var checkHistorical=ui.Checkbox({label:'Historical (1950-2015)',
        value:true,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 70px'}});
  var checkSSP245=ui.Checkbox({label:'SSP2-4.5 (2015-2100)',
        value:false,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 70px'}});
  var checkSSP585=ui.Checkbox({label:'SSP5-8.5 (2015-2100)',
        value:false,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 70px'}});
        
  checkHistorical.onChange(function(){
    if(checkHistorical.getValue()===true){
        checkSSP245.setValue(false);
        checkSSP585.setValue(false);
        inputVars=inputVars.set('scenario','historical');
        print(inputVars.get('scenario'))
    }
  });
  checkSSP245.onChange(function(){
    if(checkSSP245.getValue()===true){
        checkHistorical.setValue(false);
        checkSSP585.setValue(false);
        inputVars=inputVars.set('scenario','ssp245');
        print(inputVars.get('scenario'))
    }
  });
  checkSSP585.onChange(function(){
    if(checkSSP585.getValue()===true){
        checkSSP245.setValue(false);
        checkHistorical.setValue(false);
        inputVars=inputVars.set('scenario','ssp585');
        print(inputVars.get('scenario'))
    }
  });
        
  //2. Select simulation
  var simulationLabel=ui.Label('2. Select simulation(s):',
          {margin: '15px 50px 1px 50px',
          fontWeight: 'bold'});
          
  //3. Select variables
  var variableLabel=ui.Label('3. Select variable(s):',
          {margin: '15px 50px 1px 50px',
          fontWeight: 'bold'});
          
  //4. If more than one simulation selected, select whether to extract individual simulation results or selected ensemble mean
  var indivOrEnsembleLabel=ui.Label('4. If more than one simulation selected, select whether to extract individual simulation results, or mean of selected ensemble members for each scenario:',
          {margin: '15px 50px 1px 50px',
          fontWeight: 'bold'});
  var checkIndivSimulation=ui.Checkbox({label:'Extract individual model simulation results',
        value:true,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 70px'}});
  var checkEnsemble=ui.Checkbox({label:'Extract mean of selected simulations',
        value:false,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 70px'}});
  var checkEnsembleStDev=ui.Checkbox({label:'Extract mean and standard deviation of selected simulations',
        value:false,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 70px'}});
  checkIndivSimulation.onChange(function(){
      if(checkIndivSimulation.getValue()===true){
        checkEnsemble.setValue(false);
        checkEnsembleStDev.setValue(false); 
        checkIndivSimulation.setValue(true);
        inputVars=inputVars.set('outputType','individual');
        print(inputVars.get('outputType'))
    }
  });
  checkEnsemble.onChange(function(){
      if(checkEnsemble.getValue()===true){
        checkIndivSimulation.setValue(false);
        checkEnsembleStDev.setValue(false);
        checkEnsemble.setValue(true);
        inputVars=inputVars.set('outputType','ensemble');
        print(inputVars.get('outputType'))
    }
  });
  checkEnsembleStDev.onChange(function(){
      if(checkEnsembleStDev.getValue()===true){
        checkIndivSimulation.setValue(false);
        checkEnsemble.setValue(false); 
        checkEnsembleStDev.setValue(true);
        inputVars=inputVars.set('outputType','ensembleSD');
        print(inputVars.get('outputType'))
    }
  });
  
  //5. Date range select options
  var dateLabel=ui.Label({value:'5. Define start/end dates in YYYY-MM-DD format:',
          style:{//fontSize: '15px',
          margin: '10px 50px 10px 50px',
          fontWeight: 'bold'}});
  var startDateBox=ui.Textbox({
    value: '1950-01-01',
    disabled:true,
    style:{stretch:'horizontal',margin: '1px 50px 1px 50px'},
    onChange: function() {
      inputVars=inputVars.set('dateStart',startDateBox.getValue());
    }
  });
  
  var endDateBox=ui.Textbox({
    value: '2015-01-01',
    disabled: true,
    style:{stretch:'horizontal',margin: '1px 50px 1px 50px'},
    onChange: function() {
      inputVars=inputVars.set('dateEnd',endDateBox.getValue());
    }
  });
  checkHistorical.onChange(function(){
    if(checkHistorical.getValue()===true){
      startDateBox.setValue('1950-01-01');
      endDateBox.setValue('2015-01-01');
    }
  });
  checkSSP245.onChange(function(){
    if(checkSSP245.getValue()===true){
      startDateBox.setValue('2015-01-01');
      endDateBox.setValue('2100-01-01');
    }
  });
  checkSSP585.onChange(function(){
    if(checkSSP585.getValue()===true){
      startDateBox.setValue('2015-01-01');
      endDateBox.setValue('2100-01-01');
    }
  });
  
  // Dropdown menus for range of months
  var months_dropdown = {
    January: [1],February: [2],March: [3],April: [4],May: [5],
    June: [6],July: [7],August: [8],September: [9],October: [10],
    November: [11],December: [12]
  };
  var months = [
      'January', 'February', 'March', 'April', 'May',
      'June', 'July', 'August', 'September',
      'October', 'November', 'December'
      ];
  function monthNameToNum(monthname) {
      var month = months.indexOf(monthname)+1;
      return month;
  }
  var select1 = ui.Select({
    placeholder:'Month start (default: January)',
    disabled:true,
    style:{margin: '1px 50px 1px 50px',stretch:'horizontal'},
    items: Object.keys(months_dropdown),
    onChange: function() {
      inputVars=inputVars.set('monthStart',monthNameToNum(select1.getValue()));
    }
  });
  var select2 = ui.Select({
    placeholder:'Month end (default: December)',
    disabled:true,
    style:{margin: '1px 50px 10px 50px',stretch:'horizontal'},
    items: Object.keys(months_dropdown),
    onChange: function() {
      inputVars=inputVars.set('monthEnd',monthNameToNum(select2.getValue()));
    }
  });
  
  //6. Select temporal resolution
  var tempResolutionLabel=ui.Label({value:'6. Define temporal resolution of output:',
          style:{//fontSize: '15px',
          margin: '10px 50px 1px 50px',
          fontWeight: 'bold'}});
  var tempResolutionLabel1=ui.Label({value:'Monthly/yearly increments are calendar years/months. Increments will begin from the start date defined above',
          style:{//fontSize: '15px',
          margin: '1px 50px 2px 50px'}});
  var tempResolutionSelect=ui.Select({
    placeholder:'SELECT TEMPORAL RESOLUTION OF OUTPUT',
    disabled:false,
    style:{margin: '1px 50px 1px 50px',stretch:'horizontal'},
    items: ['Daily','Monthly','Annual','Mean']
  });
  
  //7. Export format options
  var exportInfoLabel=ui.Label({value:'8. Select export data format:',
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 50px',
        fontSize:'15px',
        fontWeight: 'bold'}}); 
  var exportInfoCheck1=ui.Checkbox({label:'Table of mean values across entire RoI (average across all points/entire polygon)',
        value:false,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 50px'}});
  var exportInfoCheck2=ui.Checkbox({label:'Table of values from all grid locations selected (data for multiple points)',
        value:false,
        disabled:false,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 50px'}});
  var exportInfoCheck3=ui.Checkbox({label:'ASCII grid (large areas may take time)',
        value:false,
        disabled:true,
        style:{//fontSize: '15px',
        margin: '1px 50px 1px 50px'}});
        
  exportInfoCheck1.onChange(function(){
    if(exportInfoCheck1.getValue()===true){
      exportInfoCheck1.setValue(true);
      exportInfoCheck2.setValue(false);
      exportInfoCheck3.setValue(false);
      gridTypeCheck1.setDisabled(false);
      gridTypeCheck2.setDisabled(false);
      inputVars=inputVars.set('tableAsciivalue',1);
      // if(){
    }
  });
  exportInfoCheck2.onChange(function(){
    if(exportInfoCheck2.getValue()===true){
      exportInfoCheck1.setValue(false);
      exportInfoCheck2.setValue(true);
      exportInfoCheck3.setValue(false);
      gridTypeCheck1.setDisabled(false);
      gridTypeCheck2.setDisabled(false);
      inputVars=inputVars.set('tableAsciivalue',2);
    }
  });
  exportInfoCheck3.onChange(function(){
    if(exportInfoCheck3.getValue()===true){
      exportInfoCheck1.setValue(false);
      exportInfoCheck2.setValue(false);
      exportInfoCheck3.setValue(true);
      inputVars=inputVars.set('tableAsciivalue',3);
    }
  });
  
  
  
  //8. Region of interest options
  var CoordsLabel=ui.Label({
        value: '10. Define Point(s)/Region of Interest (up to 50 points, or one polygon; make sure above options selected first)',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          fontWeight: 'bold'
          }
      });
  var coordsTextBoxLat=ui.Textbox({
    value:'',
    placeholder:'Enter list of latitude coordinates: lat1,lat2,...',
    disabled:true,
    style:{stretch:'horizontal',
          // width:'320px',
      margin: '1px 50px 1px 50px'
    }
  });
  coordsTextBoxLat.onChange(function(){
    if(String(coordsTextBoxLat.getValue())!==''){
      var newLat=String(coordsTextBoxLat.getValue()).replace(/\s/g,'').replace(/,\s*$/, "");
      coordsTextBoxLat.setValue(newLat);
    }
  })
  var coordsTextBoxLon=ui.Textbox({
    value:'',
    placeholder:'Enter list of longitude coordinates: lon1,lon2,...',
    disabled:true,
    style:{stretch:'horizontal',
          // width:'320px',
          margin: '1px 50px 1px 50px'}
  });
  coordsTextBoxLon.onChange(function(){
    if(String(coordsTextBoxLon.getValue())!==''){
      var newLon=String(coordsTextBoxLon.getValue()).replace(/\s/g,'').replace(/,\s*$/, "");
      coordsTextBoxLon.setValue(newLon);
    }
  });
  var coordsTextBoxNames=ui.Textbox({
    value:'',
    placeholder:'(Optional) Enter site name(s): nameA,nameB,...',
    disabled:true,
    style:{stretch:'horizontal',
          // width:'320px',
          margin: '1px 50px 1px 50px'}
  });
  coordsTextBoxNames.onChange(function(){
    var newNames=coordsTextBoxNames.getValue().replace(/\s/g,'').replace(/,\s*$/, "");
    coordsTextBoxNames.setValue(newNames);
  });
  
  //Error panel that appears if there is an error in user data entry
  var CoordsErrorPanel=ui.Panel({
      style: {
      position: 'top-center'
      }
    });
  var CoordsErrorLabel=ui.Label({
        value: 'Error importing coordinates.',
        style: {
          margin: '1px 10px 1px 10px',
          fontSize: '15px',
          fontWeight: 'bold',
          stretch:'horizontal',
          textAlign:'center'
          }
      });
  var CoordsErrorLabel1=ui.Label({
        value: 'Check: (1) coordinate lists are equal length;',
        style: {
          margin: '1px 1px 1px 1px',
          fontSize: '12px',
          // fontWeight: 'bold',
          stretch:'horizontal',
          textAlign:'center'
          }
      });
  var CoordsErrorLabel2=ui.Label({
        value: '(2) if coordinate list is properly formatted (i.e comma separated and no comma at end of list);',
        style: {
          margin: '1px 1px 1px 1px',
          fontSize: '12px',
          // fontWeight: 'bold',
          stretch:'horizontal',
          textAlign:'center'
          }
      });
  var CoordsErrorLabel3=ui.Label({
        value: '(3) not more than 50 locations are being queried.',
        style: {
          margin: '1px 1px 1px 1px',
          fontSize: '12px',
          // fontWeight: 'bold',
          stretch:'horizontal',
          textAlign:'center'
          }
      });
  var CoordsErrorLabel4=ui.Label({
        value: 'If importing a polygon, check list contains 3 or more pairs of coordinates.',
        style: {
          margin: '1px 1px 1px 1px',
          fontSize: '12px',
          // fontWeight: 'bold',
          stretch:'horizontal',
          textAlign:'center'
          }
      });
  var CoordsErrorButton=ui.Button({label:'Go back',style:{stretch:'horizontal'}});
  CoordsErrorButton.onClick(function(){
    Map.remove(CoordsErrorPanel);
  });
  CoordsErrorPanel.add(CoordsErrorLabel).add(CoordsErrorLabel1).add(CoordsErrorLabel2)
    .add(CoordsErrorLabel3).add(CoordsErrorLabel4).add(CoordsErrorButton);
  var pointButton=ui.Button({label:'Import as point(s)',disabled:true,style:{stretch:'horizontal',margin: '1px 50px 1px 50px'}});
  var polygonButton=ui.Button({label:'Import as polygon',disabled:true,style:{stretch:'horizontal',margin: '1px 50px 1px 50px'}});
  
  var CoordsLabel1=ui.Label({
        value: 'Option 2: define custom point location/polygon coordinates:',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          // fontWeight: 'bold'
          }
      });
  var CoordsLabel2=ui.Label({
        value: 'Option 1: draw custom RoI using drawing tools in top left of map.',
        style: {
          margin: '1px 50px 1px 50px',
          fontSize: '15px',
          // fontWeight: 'bold',
          stretch:'horizontal'
          }
      });
  
  var CoordsLabel3=ui.Label({
        value: 'Note: mixing geometry types is not supported.',
        style: {
          margin: '1px 50px 1px 50px',
          fontSize: '12px',
          // fontWeight: 'bold',
          stretch:'horizontal'
          }
      });
      
  //if using drawing tools...
  drawingTools.onDraw(function(){
    createRoiGridButton.setDisabled(false);
    coordsTextBoxLat.setDisabled(true);
    coordsTextBoxLon.setDisabled(true);
    // coordsTextBoxNames.setDisabled(true);
    coordsTextBoxLat.setValue('');
    coordsTextBoxLon.setValue('');
    // coordsTextBoxNames.setValue([]);
    pointButton.setDisabled(true);
    polygonButton.setDisabled(true);
  });
  
  // 9. select model grid or across grid data calculation for results
  var gridTypeLabel=ui.Label({value:'9. Select how data are to be analysed:',
        style:{
        margin: '1px 50px 1px 50px',
        fontSize:'15px',
        fontWeight: 'bold'}});
  var gridTypeCheck1=ui.Checkbox({label:'Results from nearest full grid squares returned',
        value:false,
        disabled:true,
        style:{
        margin: '1px 50px 1px 50px'}});
  var gridTypeCheck2=ui.Checkbox({label:'Weighted mean of closest grid squares to RoI geometry',
        value:false,
        disabled:true,
        style:{
        margin: '1px 50px 1px 50px'}});
  
  gridTypeCheck1.onChange(function(){
    drawingTools.setShown(true);
    if(gridTypeCheck1.getValue()===true){
      gridTypeCheck1.setValue(true);
      gridTypeCheck2.setValue(false);
      inputVars=inputVars.set('closestGrid',true)
                         .set('reducer',ee.Reducer.mean().unweighted());
      coordsTextBoxLat.setDisabled(false);
      coordsTextBoxLon.setDisabled(false);
      coordsTextBoxNames.setDisabled(false);
      pointButton.setDisabled(false);
      polygonButton.setDisabled(false);
    }
  });
  gridTypeCheck2.onChange(function(){
    drawingTools.setShown(true);
    if(gridTypeCheck2.getValue()===true){
      gridTypeCheck1.setValue(false);
      gridTypeCheck2.setValue(true);
      inputVars=inputVars.set('closestGrid',false)
                         .set('reducer',ee.Reducer.mean());
      coordsTextBoxLat.setDisabled(false);
      coordsTextBoxLon.setDisabled(false);
      coordsTextBoxNames.setDisabled(false);
      pointButton.setDisabled(false);
      polygonButton.setDisabled(false);
    }
  });
  
  
  // 11. Create gridded ROI
  var createRoiGridButton=ui.Button({label:'11. Generate gridded area of interest',
                                          disabled:true,
                                          style:{stretch:'horizontal',
                                          margin:'5px 50px 1px 50px'
  }});
  
  
      
  // 12. Get data
  var goButton=ui.Button({label:'12. Create export tasks',disabled:true,style:{stretch:'horizontal',margin: '10px 50px 10px 50px'}});
  
  
  
  
  
  /////////////////////////////////////////////////////////////////
  //code to user-proof mainPanel
  
  //Loading panel to add to map while evaluate functions are processing
  //This is also used in other parts of the code!
  var loadingPanel=ui.Panel({
      style: {
      position:'top-center',
      shown:false
      }
    });
  var loadingLabel=ui.Label({value:'Processing, please wait...',
        style: {
          fontSize: '20px',
          fontWeight: 'bold',
          textAlign:'center',
          stretch:'horizontal'
        }});
  loadingPanel.add(loadingLabel);
  Map.add(loadingPanel);
  
  var errorSelectMessage=ui.Panel({
                      style: {
                      position: 'top-center',
                      shown:false
                      }
                    });
  var errorSelectMessageLabel=ui.Label('Please select at least one variable');
  errorSelectMessage.add(errorSelectMessageLabel);
  Map.add(errorSelectMessage);
  
  /////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////
  
  //////
  //Import data as points option
  var geomType;
  var listCoordsNames='';
  var listCoordsNamesLength;
  var listCoordsLat;
  var listCoordsLon;
  var listCoordsLatLength;
  var listCoordsLonLength;
  var firstCondition;
  var singleMultiCondition;
  var secondCondition;
  var listCoordsLengthCondition;
  
  pointButton.onClick(function(){
    geomType='Point';
    inputVars=inputVars.set('geomType',geomType);
    print(inputVars,'geomCheck')
    print('hellloooooo')
    
    //remove superfluous layers from map (leaves background T map)
    while (Map.layers().length()>1){
                Map.remove(Map.layers().get(1));
              }
              
    //if site names are defined, get these from the textbox
    if(coordsTextBoxNames.getValue()!==''){
      listCoordsNames=coordsTextBoxNames.getValue().split(',');
      listCoordsNamesLength=listCoordsNames.length;
      inputVars=inputVars.set('siteNames',listCoordsNames);
    } else {
      inputVars=inputVars.set('siteNames','');
    }
    
    //nested series of checks to ensure data have been entered correctly by the user
    firstCondition=coordsTextBoxLat.getValue()!=='' && coordsTextBoxLon.getValue()!=='';
    if(firstCondition){ //checks if lat/lon boxes are empty or not
      listCoordsLat=JSON.parse('['+coordsTextBoxLat.getValue()+']');
      listCoordsLon=JSON.parse('['+coordsTextBoxLon.getValue()+']');
      listCoordsLatLength=listCoordsLat.length;
      listCoordsLonLength=listCoordsLon.length;
      listCoordsLengthCondition=listCoordsLatLength<=50;
      singleMultiCondition=(coordsTextBoxNames.getValue()==='' ||
          (listCoordsNamesLength===listCoordsLatLength && exportInfoCheck2.getValue()===true) ||
          (listCoordsNamesLength===1 && exportInfoCheck1.getValue()===true));
      
      if(listCoordsLengthCondition){  //checks if number of coords <=50 (produces memory error otherwise)
        if(singleMultiCondition){ //checks if number of lat/lon pairs matches num of site names
          secondCondition=listCoordsLatLength===listCoordsLonLength && listCoordsLatLength===1;
          if(secondCondition){    //checks if single point
            createRoiGridButton.setDisabled(false);
            geometry=ee.Geometry.Point(ee.List(listCoordsLon).zip(ee.List(listCoordsLat)).get(0));
            Map.addLayer(geometry,{color:'red'},'Imported RoI');
          } else if (listCoordsLatLength===listCoordsLonLength && listCoordsLatLength>1){ //checks if multipoint
            createRoiGridButton.setDisabled(false);
            geometry=ee.Geometry.MultiPoint(ee.List(listCoordsLon).zip(ee.List(listCoordsLat)));
            Map.addLayer(geometry,{color:'red'},'Imported RoI');
          } else {
            Map.add(CoordsErrorPanel);
          }
        } else {
          Map.add(CoordsErrorPanel);
        }
      } else {
        Map.add(CoordsErrorPanel);
      }
      } else {
        Map.add(CoordsErrorPanel);
    }
  });
  
  
  //////
  //Import data as polygon option
  
  polygonButton.onClick(function(){
    geomType='Polygon';
    inputVars=inputVars.set('geomType',geomType);
    while (Map.layers().length()>1){
                Map.remove(Map.layers().get(1));
              }
              
    if(coordsTextBoxNames.getValue()!==''){
      listCoordsNames=coordsTextBoxNames.getValue().split(',');
      listCoordsNamesLength=listCoordsNames.length;
      inputVars=inputVars.set('siteNames',listCoordsNames);
    } 
    firstCondition=coordsTextBoxLat.getValue()!=='' && coordsTextBoxLon.getValue()!=='';
    if(firstCondition){
      listCoordsLat=JSON.parse('['+coordsTextBoxLat.getValue()+']');
      listCoordsLon=JSON.parse('['+coordsTextBoxLon.getValue()+']');
      listCoordsLatLength=listCoordsLat.length;
      listCoordsLonLength=listCoordsLon.length;
      singleMultiCondition=(listCoordsNames==='' || listCoordsNames===null ||
          (listCoordsNamesLength===listCoordsLatLength && exportInfoCheck2.getValue()===true) ||
          (listCoordsNamesLength===1 && exportInfoCheck1.getValue()===true));
      if(singleMultiCondition){
        secondCondition=listCoordsLatLength===listCoordsLonLength && listCoordsLatLength>=3;
        if(secondCondition){
          createRoiGridButton.setDisabled(false);
          geometry=ee.Geometry.Polygon(ee.List(listCoordsLon).zip(ee.List(listCoordsLat)));
          Map.addLayer(geometry,{color:'red'},'Imported RoI');
        } else {
          Map.add(CoordsErrorPanel);
        }
      } else {
        Map.add(CoordsErrorPanel);
      }
    } else {
      Map.add(CoordsErrorPanel);
    }
  });
  
  /////////////
  // Create gridded ROI
  
  createRoiGridButton.onClick(function(){
    if(loadingPanel.style().get('shown')===false){
      loadingPanel.style().set('shown',true);
    }
    // while (Map.layers().length()>1){
    //             Map.remove(Map.layers().get(1));
    //           }
    //takes drawingTools defined geometry, or manually entered geometry
    var geom;
    print(geometry)
    print(inputVars)
    if(geometry!==undefined){
      geom=geometry;
      geomType=ee.Geometry(geometry).type();
      inputVars=inputVars.set('geomType',geomType)
      print(inputVars,'geomType')
    } else {
      if (drawingTools.layers().get(0).geometries().length()===1){
        geom=ee.Geometry(drawingTools.layers().get(0).geometries().get(0));
      } else {
        geomType=ee.Geometry(drawingTools.layers().get(0).geometries().get(0)).type().getInfo();
        inputVars=inputVars.set('geomType',geomType)
        var geomList=[];
        for (var i = 0; i < drawingTools.layers().get(0).geometries().length(); i++) {
         geomList[i]=ee.Geometry(drawingTools.layers().get(0).geometries().get(i)).coordinates();
        }
        if (geomType==='Point'){
          geom=ee.Geometry.MultiPoint(geomList);
        } else if (geomType==='Polygon' || geomType==='Rectangle'){
          geom=ee.Geometry.MultiPolygon(geomList);
        } else if (geomType==='LineString'){
          geom=ee.Geometry.MultiLineString(geomList);
        }
        
        inputVars=inputVars.set('geomType',geomType);
      }
    }
    inputVars=inputVars.set('initialGeom',geom);
    var initialCoords;
    var initialFC;
    var crs='EPSG:4326';//inputVars.get('crs');
    var bufferRadius=ee.Number(ee.List(inputVars.get('transform')).get(0)).divide(2).add(0.000001);
    print(bufferRadius,'bufferRadius')
    //define initial ROI grid (not matching exactly to input image grid squares)
    
    
    //define initial ROI grid (not matching exactly to input image grid squares)
    inputVars.get('geomType').evaluate(function(type){
      print(bufferRadius,'bufferRadius1')
      var initialGeomGrid;
      if(type==='Point'){
        print(type)
        var pointCoords=ee.Geometry(inputVars.get('initialGeom')).coordinates();
        
        pointCoords=ee.Algorithms.If(ee.Number(ee.List(pointCoords).flatten().size()).eq(2),
                    ee.List([0]).set(0,pointCoords),pointCoords);
                    
        initialGeomGrid=ee.List(pointCoords).map(function(point){
          return ee.Feature(ee.Geometry.Point(point)).buffer(bufferRadius,0,inputVars.get('crs')).bounds();
        });
      } else {
        initialGeomGrid=ee.Feature(ee.Geometry(inputVars.get('initialGeom')));
      }
      inputVars=inputVars.set('initialGridROI',ee.FeatureCollection(initialGeomGrid));
      print(inputVars,'initialGridCheck')
      print(inputVars.get('initialGridROI'),'initialGridROI')
    });
    
    var geom1=ee.Geometry(geom).buffer(ee.Number(bufferRadius).multiply(3),0,inputVars.get('crs')).bounds();
    var centroids=ee.Image.pixelLonLat()
              .reproject('EPSG:4326',[0.25,0,-180,0,-0.25,90]);
    var scale=ee.Image(centroids).projection().nominalScale();
    
    var mapCoords=ee.List(ee.Dictionary(ee.Image(centroids).reduceRegion({
      reducer:ee.Reducer.toList(),
      crsTransform:[0.25,0,-180,0,-0.25,90],
      crs:'EPSG:4326',
      maxPixels:1e13,
      geometry:geom1
    })).aside(print,'hello').toArray(null,0).aside(print,'hello1').toList());
    print(mapCoords,'mapCoords')
    mapCoords=ee.List([ee.List(mapCoords).get(1),ee.List(mapCoords).get(0)]);
    
    var geomGrid;
    ee.List(ee.List(mapCoords).get(0)).size().evaluate(function(size){
      inputVars.get('closestGrid').evaluate(function(result){
        if(size>1){
        geomGrid=ee.FeatureCollection(ee.List(ee.Geometry.MultiPoint(ee.List(mapCoords.get(0))
                          .zip(ee.List(mapCoords.get(1))),crs).coordinates())
                    .map(function(point){
                      return ee.Feature(ee.Geometry.Point(point)).buffer(bufferRadius,0,crs).bounds();
                    }));
        geomGrid=geomGrid.filterBounds(ee.Geometry(inputVars.get('initialGeom')));
                    
        inputVars=inputVars.set('gridMatchROI',ee.FeatureCollection(geomGrid));
        } else {
          geomGrid=ee.Feature(ee.Geometry.Point(ee.List(mapCoords).flatten(),crs)
                      .buffer(bufferRadius,0,crs).bounds());
          inputVars=inputVars.set('gridMatchROI',ee.FeatureCollection(geomGrid));
        }
        print(geomGrid,'geomGrid')
        print(inputVars,'gridMatchCheck')
        print(inputVars.get('gridMatchROI'),'gridMatchCheck')
      
        if(result===true){
          Map.addLayer(ee.FeatureCollection(inputVars.get('gridMatchROI')),{color:'blue'});
          inputVars=inputVars.set('analysisROI',ee.FeatureCollection(inputVars.get('gridMatchROI')));
        } else if (result===false){
          Map.addLayer(ee.FeatureCollection(inputVars.get('initialGridROI')),{color:'red'});
          ee.Geometry(inputVars.get('initialGeom')).type().evaluate(function(geomType){
            var featColl
            if(geomType==='Point'){
              featColl=ee.Feature(ee.FeatureCollection(inputVars.get('initialGridROI')).first());
            } else if (geomType==='MultiPoint'){
              var geomCoords=ee.Geometry(inputVars.get('initialGeom')).coordinates()
              print(geomCoords,'geomCoords')
              featColl=ee.List(geomCoords).map(function(coords){
                return ee.Feature(ee.Geometry.Point(coords)).buffer(bufferRadius,0,crs).bounds();
              })
            } else if (geomType==='Polygon'){
              featColl=ee.Feature(ee.FeatureCollection(inputVars.get('initialGridROI')).first());
            }
            inputVars=inputVars.set('analysisROI',ee.FeatureCollection(featColl));
            print(inputVars.get('analysisROI'),'analysisROI_0')
          })
          
        }
        
        goButton.setDisabled(false);
        loadingPanel.style().set('shown',false);
      });
      print(inputVars,'geom')
    });
  });
  
  
  
  /////////////////
  //Get the data for each grid point/RoI
  goButton.onClick(function(){
    if(loadingPanel.style().get('shown')===false){
      loadingPanel.style().set('shown',true);
    }
    goButton.setDisabled(true);
    //Get images at correct temporal resolution
    loadingPanel.style().set('shown',true);
    print(inputVars,'inputVars')
    // var exportGeometry=ee.Geometry(geometry,'EPSG:4326');
    var scenario=inputVars.get('scenario').getInfo();
    // Map.addLayer(geometry);
    inputVars.get('simulationsSelected').evaluate(function(sims){
    inputVars.get('variablesSelected').evaluate(function(result){
      print(sims)
      var mLimit
      if(checkIndivSimulation.getValue()===true){
        mLimit=sims.length;
      } else {
        mLimit=1;
      }
      for(var m=0;m<mLimit;m++){
        var modelSimulation='';
        var modelDescription='';
        if(checkIndivSimulation.getValue()===true){
          modelSimulation=[sims[m]];
          modelDescription=sims[m];
        } else {
          modelSimulation=ee.List(sims);
          modelDescription=modelSimulation.join("_")
          print(modelDescription,'to string from list')
        }
        
    //assign site names and get data from im collection
    ee.List([inputVars.get('tableAsciivalue'),
    inputVars.get('siteNames'),
    inputVars.get('geomType'),
    modelDescription,
    modelSimulation,
    inputVars.get('variablesSelected')])
    .evaluate(function(resultInput){
      
    
      
    var analysisFlag=resultInput[0];
    var siteNames=resultInput[1];
    var geomType=resultInput[2];
    var modelDescription=resultInput[3];
    var modelSimulation=resultInput[4];
    var variables=resultInput[5];
    
    var exportImColl=ee.ImageCollection("NASA/GDDP-CMIP6")
            .filter(ee.Filter.inList('model',modelSimulation))
            .filter(ee.Filter.eq('scenario',inputVars.get('scenario')))
            .filterDate(inputVars.get('dateStart'),inputVars.get('dateEnd'))
            .filter(ee.Filter.calendarRange(inputVars.get('monthStart'),
                                            inputVars.get('monthEnd'),'month'))
            .select(variables);
            //.limit(10000)
        
    
    if(tempResolutionSelect.getValue()==='Monthly'){
      exportImColl=timestepProcessing(exportImColl,inputVars,'month');
    } else if (tempResolutionSelect.getValue()==='Annual'){
      exportImColl=timestepProcessing(exportImColl,inputVars,'year');
    } else if (tempResolutionSelect.getValue()==='Mean'){
      var bandNames=ee.Image(ee.ImageCollection(exportImColl).first()).bandNames();
      exportImColl=ee.Image(ee.ImageCollection(exportImColl)
                    .reduce(ee.Reducer.mean(),2)).rename(bandNames)
                    .set('system:time_start',ee.Date.parse('YYYY-MM-dd',inputVars.get('dateStart')),
                        'system:time_end',ee.Date.parse('YYYY-MM-dd',inputVars.get('dateEnd')),
                        'model',modelDescription,
                        'timestep','mean');
    }
    if(checkEnsembleStDev.getValue()===true && tempResolutionSelect.getValue()==='Daily'){
      exportImColl=timestepProcessing(exportImColl,inputVars,'daily');
    }
  
    
    
    print(modelDescription,'modelDescription')
    var imColl=ee.ImageCollection(exportImColl).aside(print,'hello')
                // .filterDate(inputVars.get('dateStart'),inputVars.get('dateEnd'))
                // .select(inputVars.get('variablesSelected'))
                // .filter(ee.Filter.calendarRange(inputVars.get('monthStart'),inputVars.get('monthEnd'),'month'));
                
    var imCollStdDev
    if(checkEnsembleStDev.getValue()===true){
      imCollStdDev=ee.ImageCollection(exportImColl)
                          .filter(ee.Filter.eq('dataType','stdDev'));
      imColl=ee.ImageCollection(exportImColl)
                          .filter(ee.Filter.inList('dataType',['mean','modelOutput']));                    
    }
   
      var ROI=ee.FeatureCollection(inputVars.get('analysisROI'));
      print(ROI,'analysisROI_1')
      if(analysisFlag==1 || analysisFlag==2){
        var roiSize;
        var listNum;
        var listEl;
        var featCollList;
        var output;
        var outputStdDev;
        var reducer;
        if(gridTypeCheck1.getValue()===true){
          reducer=ee.Reducer.mean().unweighted();
        } else if (gridTypeCheck2.getValue()===true){
          reducer=ee.Reducer.mean();
        }
        
        if(analysisFlag==1){
          ROI=ee.FeatureCollection(ROI).union(10);
        }
        print(ROI,'analysisROI_2')
        var crs=ee.String(inputVars.get('crs'));
        if(siteNames.length===0 || siteNames===undefined){
          roiSize=ee.FeatureCollection(ROI).size();
          listNum=ee.Number(roiSize).subtract(1);
          listEl=ee.List.sequence(0,listNum,1);
          featCollList=ee.FeatureCollection(ROI).toList(roiSize);
          output=ee.List(listEl).map(function(num){
            var roiGeom=ee.Geometry(ee.Feature(featCollList.get(num)).geometry());
            var roiCentroid=ee.Geometry(roiGeom).centroid(1,crs);
            var centLat=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(1)).format('%.5f');
            var centLon=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(0)).format('%.5f');
            var data=ee.ImageCollection(imColl).map(function(im){
              var imData=ee.Image(im).reduceRegion({
                reducer:reducer,
                scale:1000,
                geometry:roiGeom,
                crs:crs
              }).set('system:time_start',ee.Image(im).get('system:time_start'))
                .set('date',ee.Image(im).date().format('YYYYMMdd HHmm'))
                .set('centroidLatLon',[centLat,centLon])
                .set('siteName',ee.String(ee.String('Site').cat(ee.Number(num).int()).cat(' ').cat(ee.String(centLat))
                                            .cat(' ').cat(ee.String(centLon))).replace("\\.", ",",'g'));
              return ee.Feature(null).set(ee.Dictionary(imData));
            });
            return ee.FeatureCollection(data);
          }).aside(print,'output');
          if(checkEnsembleStDev.getValue()===true){
            outputStdDev=ee.List(listEl).map(function(num){
              var roiGeom=ee.Geometry(ee.Feature(featCollList.get(num)).geometry());
              var roiCentroid=ee.Geometry(roiGeom).centroid(1,crs);
              var centLat=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(1)).format('%.5f');
              var centLon=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(0)).format('%.5f');
              var data=ee.ImageCollection(imCollStdDev).map(function(im){
                var imData=ee.Image(im).reduceRegion({
                  reducer:reducer,
                  scale:1000,
                  geometry:roiGeom,
                  crs:crs
                }).set('system:time_start',ee.Image(im).get('system:time_start'))
                  .set('date',ee.Image(im).date().format('YYYYMMdd HHmm'))
                  .set('centroidLatLon',[centLat,centLon])
                  .set('siteName',ee.String(ee.String('Site').cat(ee.Number(num).int()).cat(' ').cat(ee.String(centLat))
                                              .cat(' ').cat(ee.String(centLon))).replace("\\.", ",",'g'));
                return ee.Feature(null).set(ee.Dictionary(imData));
              });
              return ee.FeatureCollection(data);
            });
          }
        } else {
          var siteNamesList=ee.List(siteNames);
          roiSize=ee.FeatureCollection(ROI).size();
          listNum=ee.Number(roiSize).subtract(1);
          listEl=ee.List.sequence(0,listNum,1);
          featCollList=ee.FeatureCollection(ROI).toList(roiSize);
          var initialGeom;
          var initialGeomWNames;
          if(geomType==='Point'&&siteNames.length>0){
            initialGeom=ee.List(ee.Geometry(inputVars.get('initialGeom')).coordinates());
            initialGeomWNames=ee.List(listEl).map(function(num){
              return ee.Feature(ee.Geometry.Point(initialGeom.get(num)))
                        .set('siteName',siteNamesList.get(num));
            });
          } else if (geomType==='Point'&&siteNames.length===0) {
            initialGeom=ee.List(ee.Geometry(inputVars.get('initialGeom')).coordinates());
            initialGeomWNames=ee.List(listEl).map(function(num){
              return ee.Feature(ee.Geometry.Point(initialGeom.get(num)))
                        .set('siteName',ee.String('Site').cat(ee.Number(num).int()));
            });
          }
          if(geomType==='Point'){
            var dist=ee.Number(ee.List(inputVars.get('transform')).get(0)).divide(2);
            var distFilter = ee.Filter.withinDistance({
                              distance: dist,
                              leftField: '.geo',
                              rightField: '.geo',
                              maxError: 1
                            });
            var distSaveAll = ee.Join.saveAll({
                              matchesKey: 'points',
                              measureKey: 'distance'
                            });
            var spatialJoined = distSaveAll.apply(ee.FeatureCollection(ROI),
                                      ee.FeatureCollection(initialGeomWNames),distFilter);
            featCollList=ee.FeatureCollection(spatialJoined).map(function(feat){
              var site=ee.Feature(ee.FeatureCollection(ee.List(ee.Feature(feat).get('points')))
                                  .sort('distance',true).first()).get('siteName');
              return ee.Feature(feat).set('siteName',site);
            }).toList(roiSize);
          }
          output=ee.List(listEl).map(function(num){
            var roiGeom=ee.Geometry(ee.Feature(featCollList.get(num)).geometry());
            
            var roiCentroid=ee.Geometry(roiGeom).centroid(1,crs);
            var centLat=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(1)).format('%.3f');
            var centLon=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(0)).format('%.3f');
            var data=ee.ImageCollection(imColl).map(function(im){
              var imData=ee.Image(im).reduceRegion({
                reducer:reducer,
                scale:1000,
                geometry:roiGeom,
                crs:crs
              }).set('system:time_start',ee.Image(im).get('system:time_start'))
                .set('date',ee.Image(im).date().format('YYYYMMdd HHmm'))
                .set('latLon',[centLat,centLon])
                .set('siteName',ee.Feature(featCollList.get(num)).get('siteName'));
              return ee.Feature(null).set(ee.Dictionary(imData));
            });
            return ee.FeatureCollection(data);
          });
          
          if(checkEnsembleStDev.getValue()===true){
            outputStdDev=ee.List(listEl).map(function(num){
              var roiGeom=ee.Geometry(ee.Feature(featCollList.get(num)).geometry());
              
              var roiCentroid=ee.Geometry(roiGeom).centroid(1,crs);
              var centLat=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(1)).format('%.3f');
              var centLon=ee.Number(ee.List(ee.Geometry(roiCentroid).coordinates()).get(0)).format('%.3f');
              var data=ee.ImageCollection(imCollStdDev).map(function(im){
                var imData=ee.Image(im).reduceRegion({
                  reducer:reducer,
                  scale:1000,
                  geometry:roiGeom,
                  crs:crs
                }).set('system:time_start',ee.Image(im).get('system:time_start'))
                  .set('date',ee.Image(im).date().format('YYYYMMdd HHmm'))
                  .set('latLon',[centLat,centLon])
                  .set('siteName',ee.Feature(featCollList.get(num)).get('siteName'));
                return ee.Feature(null).set(ee.Dictionary(imData));
              });
              return ee.FeatureCollection(data);
            });
          }
        }
        
        //display download panel/results preview
        
        // var dataToShow=ee.FeatureCollection(output).toList(output.size());
        
        // ee.List([ee.List(output).map(function(featColl){
        //     return ee.String(ee.Feature(ee.FeatureCollection(featColl).first()).get('siteName'));
        //   }),
        //   ee.List(inputVars.get('variablesSelected')),
        //   inputVars.get('description'),
        //   ee.ImageCollection(inputVars.get('imColl')).get('visualization_0_bands')])
        //   .evaluate(function(result){
        //   var siteNamesOrdered=result[0];
        //   var properties=result[1];
        //   var description=result[2];
        //   var propertyName=result[3];
          
        //   ee.Algorithms.If(ee.List(inputVars.get('variablesSelected')).contains(propertyName),propertyName,
        //                 ee.List(inputVars.get('variablesSelected')).get(0)).evaluate(function(propertyName){
                          
          
        //   var figurePanel=ui.Panel({
        //     style: {
        //     width:'33.33%', 
        //     position:'top-left'
        //     }
        //   });
        //   var figureLabel1=ui.Label({
        //       value: 'Data preview (limited to 1000 observations)',
        //       style: {
        //         margin: '1px 10px 1px 10px',
        //         fontSize: '20px',
        //         fontWeight: 'bold',
        //         textAlign:'center',
        //         stretch:'horizontal'
        //         }
        //     });
        //     var figureLabel1a=ui.Label({
        //       value: 'Note: Data preview plot is for illustrative purposes only. If there are >1000 observations in query then',
        //       style: {
        //         margin: '1px 1px 1px 1px',
        //         fontSize: '10px',
        //         fontWeight: 'bold',
        //         textAlign:'center',
        //         stretch:'horizontal'
        //         }
        //     });
        //     var figureLabel1b=ui.Label({
        //       value: 'the complete dataset queried can be exported using the buttons below.',
        //       style: {
        //         margin: '1px 1px 1px 1px',
        //         fontSize: '10px',
        //         fontWeight: 'bold',
        //         textAlign:'center',
        //         stretch:'horizontal'
        //         }
        //     });
          
          
        //   var chart;
        //   var propertyNamePrev;
        //   var siteIndex=0;
        //   var siteIndexPrev=-1;
        //   chart=ui.Chart.feature.byFeature(ee.FeatureCollection(ee.List(dataToShow).get(0)).limit(1000),'system:time_start',propertyName)
        //       .setOptions({title:description+': '+propertyName+' (site: '+
        //                     siteNamesOrdered[0]+')',
        //                     hAxis:{title:'Datetime'}
        //                 });
          
        //   var selectProperty = ui.Select({
        //     // placeholder:'2m air temperature',
        //     value:propertyName,
        //     style:{margin: '10px 10px 1px 1px',stretch:'horizontal'},
        //     items: properties,
        //     onChange: function() {
        //       propertyName=selectProperty.getValue();
        //       if(propertyName!==propertyNamePrev){
        //         figurePanel.remove(chart);
        //         chart=ui.Chart.feature.byFeature(ee.FeatureCollection(ee.List(dataToShow).get(siteIndex)).limit(1000),'system:time_start',propertyName)
        //           .setOptions({title:description+': '+propertyName+' ('+
        //                     siteNamesOrdered[siteIndex]+']',
        //                     hAxis:{title:'Datetime'}
        //                 });
        //         figurePanel.insert(4,chart);
        //         propertyNamePrev=propertyName;
        //       }
        //     }
        //   });
          
        //   var selectSite = ui.Select({
        //     placeholder:'Select site to preview',
        //     // value:siteNames[0],
        //     style:{margin: '10px 10px 1px 1px',stretch:'horizontal'},
        //     items: siteNamesOrdered,
        //     onChange: function() {
        //       siteIndexPrev=siteIndex;
        //       siteIndex=siteNamesOrdered.indexOf(selectSite.getValue());
        //       if(siteIndex!==siteIndexPrev){
        //       figurePanel.remove(chart);
        //         chart=ui.Chart.feature.byFeature(ee.FeatureCollection(ee.List(dataToShow).get(siteIndex)).limit(1000),'system:time_start',propertyName)
        //           .setOptions({title:description+': '+propertyName+' (site: '+
        //                     siteNamesOrdered[siteIndex]+')',
        //                     hAxis:{title:'Datetime'}
        //                 });
        //         figurePanel.insert(4,chart);
        //         siteIndexPrev=siteIndex;
        //       }
        //     }
        //   });
            
            var format = function(table, rowId, colId, rowProperty, colProperty) {
            var rows = table.distinct(rowId); 
            var joined = ee.Join.saveAll('matches').apply({
              primary: rows, 
              secondary: table, 
              condition: ee.Filter.equals({
                leftField: rowId, 
                rightField: rowId
              })
            });
            return joined.map(function(row) {
                var values = ee.List(row.get('matches'))
                  .map(function(feature) {
                    feature = ee.Feature(feature);
                    return [feature.get(colId), feature.get(colProperty)];
                  }).flatten();
                return row.select([rowId, rowProperty]).set(ee.Dictionary(values));
              });
          };
          
          var featCollFlat=ee.FeatureCollection(output).flatten();
        //   var outputTable = format(featCollFlat, 'date', 'siteName', 'system:time_start', propertyName);
        //   var dateStringsForOutput=['system:time_start','date'];
          
        //   var downloadButton1=ui.Button({label:'Click here to create export task for variable displayed above from all sites',
        //                                 style: {
        //                                   fontWeight: 'bold',
        //                                   textAlign:'center',
        //                                   stretch:'horizontal'
        //                                 }
        //   });
        //   var downloadButton2=ui.Button({label:'Click here to create export task for all variables selected from all sites',
        //                                 style: {
        //                                   fontWeight: 'bold',
        //                                   textAlign:'center',
        //                                   stretch:'horizontal'
        //                                 }
        //   });
            
        //   downloadButton1.onClick(function(){
            
        //     propertyName=selectProperty.getValue();
        //     outputTable=format(featCollFlat, 'date', 'siteName', 'system:time_start', propertyName);
        //     Export.table.toDrive({
        //         collection:ee.FeatureCollection(outputTable),
        //         description: description+'_'+propertyName,
        //         fileFormat:'CSV'
        //       });
        //   });
        //   downloadButton2.onClick(function(){
            Export.table.toDrive({
                collection:ee.FeatureCollection(featCollFlat),
                description: scenario+'_'+modelDescription+'_'+startDateBox.getValue()+'_to_'+endDateBox.getValue()+'_'+tempResolutionSelect.getValue(),
                fileFormat:'CSV'
              });
              
            if(checkEnsembleStDev.getValue()===true){
              var featCollStdDevFlat=ee.FeatureCollection(outputStdDev).flatten();
              print(featCollStdDevFlat,'check')
              Export.table.toDrive({
                collection:ee.FeatureCollection(featCollStdDevFlat),
                description: 'StdDev_'+scenario+'_'+modelDescription+'_'+startDateBox.getValue()+'_to_'+endDateBox.getValue()+'_'+tempResolutionSelect.getValue(),
                fileFormat:'CSV'
              });
            }
        //   });
          
        //   var figureLabel3=ui.Label({
        //       value: 'Note: Buttons above will create an "Export Task" within Google Earth Engine.',
        //       style: {
        //         margin: '1px 1px 1px 1px',
        //         fontSize: '10px',
        //         fontWeight: 'bold',
        //         textAlign:'center',
        //         stretch:'horizontal'
        //         }
        //     });
        //   var figureLabel4=ui.Label({
        //       value: 'To export data to your Google Drive/as a GEE asset, go to "Tasks" tab and click "Run" to initiate export task.',
        //       style: {
        //         margin: '1px 1px 1px 1px',
        //         fontSize: '10px',
        //         fontWeight: 'bold',
        //         textAlign:'center',
        //         stretch:'horizontal'
        //         }
        //     });
        //     var figureLabel5=ui.Label({
        //       value: 'Large export queries (e.g. hourly data for multiple years) may take a while to complete.',
        //       style: {
        //         margin: '1px 1px 1px 1px',
        //         fontSize: '10px',
        //         fontWeight: 'bold',
        //         textAlign:'center',
        //         stretch:'horizontal'
        //         }
        //     });
        //   var closeButton=ui.Button({label:'Click to start again',style:{stretch:'horizontal'}});
        //   closeButton.onClick(function(){
        //     figurePanel.clear();
        //     restartScript()
        //   });
        //   figurePanel.add(figureLabel1).add(figureLabel1a).add(figureLabel1b).add(selectSite)
        //       .add(chart).add(selectProperty)//.add(downloadButton1)
        //       .add(downloadButton2).add(figureLabel3)
        //       .add(figureLabel4).add(figureLabel5).add(closeButton);
          
        //   if(ui.root.widgets().length()===2){
        //     ui.root.remove(ui.root.widgets().get(0));//adds panel to root (*not* Map)
        //   }
        //   ui.root.insert(0,figurePanel);
        //   loadingPanel.style().set('shown',false);  
        // }); //end of propertyName evaluate
        // // }); //end of description evaluate
        // // }); //end of properties evaluate
        // }); //end of siteNamesOrdered evaluate
        
        loadingPanel.style().set('shown',false);
        exportRasterInfoPanel.style().set('shown',true);
      }
    
    // }); //end of geomType evaluate
    // }); //end of siteNames evaluate
    }); //end of analysisFlag evaluate
    } //end of model simulations for loop
    })//end of variables (result) evaluate
    })//end of simulations evaluate
    
    
  });
  
  
  ////////////////////////////////////////
  ///////////////////////////////////////
  
  ////////////
  //Raster GUI
  var drawPolygonLabel=ui.Label({
        value: '8. Draw Region of Interest polygon on map, or define coordinates of one polygon and click button to import',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          fontWeight: 'bold'
          }
      });
  var exportRasterLabel=ui.Label({
        value: '9. Export data for each selected variable and simulation',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          fontWeight: 'bold'
          }
      });
  var exportRasterButton=ui.Button({label:'Create export task(s)',
     disabled:false,
     style:{margin: '1px 50px 1px 50px',stretch:'horizontal'}
  });
  
  var exportRasterInfoPanel=ui.Panel({
    style: {
    position: 'top-center',
    width:'50%',
    shown:false
    }
  });
  var exportRasterInfoLabel=ui.Label({
        value: 'To export data to Google Drive run the task(s) that can be viewed in the Tasks tab.',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          fontWeight: 'bold',
          textAlign:'center'
          }
      });
  var exportRasterInfoLabel1=ui.Label({
        value: 'Once the task turns blue, files can be downloaded from your Google Drive.',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          textAlign:'center'
          }
      });
  var exportRasterInfoLabel2=ui.Label({
        value: 'Note that particularly large datasets may take several hours to process. Closing the browser window will not cancel any export tasks that have been started.',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          textAlign:'center'
          }
      });
  var exportRasterInfoLabel3=ui.Label({
        value: 'Note that raster datasets with >5000 time slices will be automatically split into multiple files.',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          textAlign:'center'
          }
      });
  var exportRasterInfoLabel4=ui.Label({
        value: 'To create new data export tasks, click the Reset button (bottom right).',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          textAlign:'center',
          fontWeight: 'bold'
          }
      });
  exportRasterInfoPanel.add(exportRasterInfoLabel)
                       .add(exportRasterInfoLabel1)
                       .add(exportRasterInfoLabel2)
                       .add(exportRasterInfoLabel3)
                       .add(exportRasterInfoLabel4);
  Map.add(exportRasterInfoPanel)
                     
  ///////////////////
  //Raster or CSV select
  var rasterOrCsvLabel=ui.Label({
        value: '7. Extract vector or raster data',
        style: {
          margin: '10px 50px 1px 50px',
          fontSize: '15px',
          fontWeight: 'bold'
          }
      });
  var rasterOrCsvSelect=ui.Select({
            placeholder:'SELECT EXPORT FORMAT',
            // value:siteNames[0],
            style:{margin: '10px 50px 10px 50px',stretch:'horizontal'},
            items: ['Raster grid (GeoTIFF)','Point data (CSV)'],
            onChange:function(){
              // dataSelect.setDisabled(false);
              print(mainPanel.widgets().length())
              print(mainPanel.widgets())
              print(inputVars)
              // print(ui.data.ActiveList(mainPanel.widgets()).get(mainPanel.widgets().length()-1))
              if(mainPanel.widgets().length()>32){
                while(mainPanel.widgets().length()>32){
                  mainPanel.remove(ui.data.ActiveList(mainPanel.widgets()).get(mainPanel.widgets().length()-1))
                }
              }
              if(rasterOrCsvSelect.getValue()==='Point data (CSV)'){
                print('point',mainPanel.widgets())
                mainPanel.add(exportInfoLabel).add(exportInfoCheck1)
                  .add(exportInfoCheck2).add(gridTypeLabel).add(gridTypeCheck1)
                  .add(gridTypeCheck2).add(CoordsLabel).add(CoordsLabel2)
                  .add(CoordsLabel3).add(CoordsLabel1).add(coordsTextBoxLat)
                  .add(coordsTextBoxLon).add(coordsTextBoxNames).add(pointButton)
                  .add(polygonButton).add(createRoiGridButton).add(goButton);
                  // .add(welcomeSubtitle1i).add(welcomeSubtitle1ii).add(welcomeSubtitle1iii);
              } else if (rasterOrCsvSelect.getValue()==='Raster grid (GeoTIFF)'){
                print('Raster',mainPanel.widgets())
                mainPanel.add(drawPolygonLabel).add(coordsTextBoxLat)
                  .add(coordsTextBoxLon).add(polygonButton)
                  .add(exportRasterLabel).add(exportRasterButton);
                  // .add(welcomeSubtitle1i).add(welcomeSubtitle1ii).add(welcomeSubtitle1iii);
                coordsTextBoxLat.setDisabled(false);
                coordsTextBoxLon.setDisabled(false);
                polygonButton.setDisabled(false);
                drawingTools.setDrawModes(['polygon','rectangle']);
                drawingTools.setShown(true);
                drawingTools.onDraw(function(){
                  geometry=ee.Geometry(drawingTools.layers().get(0).geometries().get(0));
                  print(geometry,'newGeom');
                });
              }
            }
  });
  
  
  
  //Add to panel
  mainPanel.add(timescaleLabel).add(checkHistorical).add(checkSSP245).add(checkSSP585) //step 1
    .add(simulationLabel).add(simulationSelect) //step 2
    .add(variableLabel).add(variableSelect) //step 3
    .add(indivOrEnsembleLabel).add(checkIndivSimulation).add(checkEnsemble).add(checkEnsembleStDev) //step 4
    .add(dateLabel).add(startDateBox).add(endDateBox).add(select1).add(select2) //step 5
    .add(tempResolutionLabel).add(tempResolutionLabel1).add(tempResolutionSelect)  //step 6
    .add(rasterOrCsvLabel).add(rasterOrCsvSelect); //step 7
    
//////////////////////////////////////////////////
//IMAGE COLLECTION TIMESTEP PROCESSING FUNCTION

var timestepProcessing=function(imColl,inputVars,timestep){
  var start=ee.Date.parse('YYYY-MM-dd',inputVars.get('dateStart'));
  var end=ee.Date.parse('YYYY-MM-dd',inputVars.get('dateEnd'));
  var listTimestep=ee.List.sequence(0,end.difference(start,timestep),1);
  var model=ee.Image(ee.ImageCollection(imColl).first()).get('model');
  var bandNames=ee.Image(ee.ImageCollection(imColl).first()).bandNames();
  var imCollOut
  if(checkEnsembleStDev.getValue()!==true){
    var dataType=''
    if(checkEnsemble.getValue()===true){
      model=inputVars.get('simulationsSelected');
      dataType='mean';
    } else {
      dataType='modelOutput';
    }
    imCollOut=ee.List(listTimestep).map(function(num){
      return ee.Image(ee.ImageCollection(imColl)
                .filterDate(ee.Date(start).advance(num,timestep),
                            ee.Date(start).advance(ee.Number(num).add(1),timestep))
                .reduce(ee.Reducer.mean(),2)).rename(bandNames)
                .set('system:time_start',ee.Date(start).advance(num,timestep).millis(),
                    'system:time_end',ee.Date(start).advance(ee.Number(num).add(1),timestep).millis(),
                    'timestep',timestep,
                    'model',model,
                    'dataType',dataType);
    });
  } else {
    model=inputVars.get('simulationsSelected');
    imCollOut=ee.List(listTimestep).map(function(num){
      var mean=ee.Image(ee.ImageCollection(imColl)
                .filterDate(ee.Date(start).advance(num,timestep),
                            ee.Date(start).advance(ee.Number(num).add(1),timestep))
                .reduce(ee.Reducer.mean(),2)).rename(bandNames)
                .set('system:time_start',ee.Date(start).advance(num,timestep).millis(),
                    'system:time_end',ee.Date(start).advance(ee.Number(num).add(1),timestep).millis(),
                    'timestep',timestep,
                    'model',model,
                    'dataType','mean');
      var stdDevReducer;
      if(gridTypeCheck1.getValue()===true){
        stdDevReducer=ee.Reducer.stdDev().unweighted();
      } else {
        stdDevReducer=ee.Reducer.stdDev();
      }
      var stdDev=ee.ImageCollection(ee.List(model).map(function(sim){
         return ee.Image(ee.ImageCollection(imColl)
                .filter(ee.Filter.eq('model',sim))
                .filterDate(ee.Date(start).advance(num,timestep),
                            ee.Date(start).advance(ee.Number(num).add(1),timestep))
                .reduce(ee.Reducer.mean(),2)).rename(bandNames);
      })).reduce(stdDevReducer,2).rename(bandNames)
         .set('system:time_start',ee.Date(start).advance(num,timestep).millis(),
            'system:time_end',ee.Date(start).advance(ee.Number(num).add(1),timestep).millis(),
            'timestep',timestep,
            'model',model,
            'dataType','stdDev');
      return ee.List([ee.Image(mean),ee.Image(stdDev)]);
    }).flatten();
  }
  return ee.ImageCollection(imCollOut);
};

//////////////////////////////////////////////////
//RASTER GUI CODE
  exportRasterButton.onClick(function(){
    
    exportRasterButton.setDisabled(true);
    loadingPanel.style().set('shown',true);
    print(inputVars,'inputVars')
    // var exportGeometry=geometry;
    Map.addLayer(geometry);
    var scenario=inputVars.get('scenario').getInfo();
    inputVars.get('simulationsSelected').evaluate(function(sims){
    inputVars.get('variablesSelected').evaluate(function(result){
      var mLimit
      if(checkIndivSimulation.getValue()===true){
        mLimit=sims.length;
      } else {
        mLimit=1;
      }
      for(var m=0;m<mLimit;m++){
        var modelSimulation='';
        var modelDescription='';
        if(checkIndivSimulation.getValue()===true){
          modelSimulation=[sims[m]];
          modelDescription=sims[m];
          print(modelDescription,'modelDescription')
        } else {
          modelSimulation=ee.List(sims);
          modelDescription=modelSimulation.join("_")
          print(modelDescription,'to string from list')
        }
        var exportImColl=ee.ImageCollection("NASA/GDDP-CMIP6")
            .filter(ee.Filter.inList('model',modelSimulation))
            .filter(ee.Filter.eq('scenario',inputVars.get('scenario')))
            .filterDate(inputVars.get('dateStart'),inputVars.get('dateEnd'))
            .filter(ee.Filter.calendarRange(inputVars.get('monthStart'),
                                            inputVars.get('monthEnd'),'month'));
            //.limit(10000)
        
        
        if(tempResolutionSelect.getValue()==='Monthly'){
          exportImColl=timestepProcessing(exportImColl,inputVars,'month');
        } else if (tempResolutionSelect.getValue()==='Annual'){
          exportImColl=timestepProcessing(exportImColl,inputVars,'year');
        } else if (tempResolutionSelect.getValue()==='Mean'){
          var bandNames=ee.Image(ee.ImageCollection(exportImColl).first()).bandNames();
          exportImColl=ee.Image(ee.ImageCollection(exportImColl)
                        .reduce(ee.Reducer.mean(),2)).rename(bandNames)
                        .set('system:time_start',ee.Date.parse('YYYY-MM-dd',inputVars.get('dateStart')).millis(),
                            'system:time_end',ee.Date.parse('YYYY-MM-dd',inputVars.get('dateEnd')).millis(),
                            'model',modelDescription,
                            'timestep','mean');
        }
        if(checkEnsembleStDev.getValue()===true && tempResolutionSelect.getValue()==='Daily'){
          exportImColl=timestepProcessing(exportImColl,inputVars,'daily');
        }
        
        var exportImCollStdDev
        if(checkEnsembleStDev.getValue()===true){
          exportImCollStdDev=ee.ImageCollection(exportImColl)
                              .filter(ee.Filter.eq('dataType','stdDev'));
          exportImColl=ee.ImageCollection(exportImColl)
                              .filter(ee.Filter.eq('dataType','mean'));                    
        }
        
        
        if(m===0){
          var exportImCollSize=ee.Number(ee.ImageCollection(exportImColl).size()).getInfo();
        }
        var exportImCollList=ee.List(ee.ImageCollection(exportImColl).toList(exportImCollSize));
       
       var exportImCollStdDevList;
        if(checkEnsembleStDev.getValue()===true){
          exportImCollStdDevList=ee.List(ee.ImageCollection(exportImCollStdDev).toList(exportImCollSize));
        }
        // var result=inputVars.get('variablesSelected').getInfo();//.evaluate(function(result){
          print(m,'export')
        
          var timestepLabel=ee.String(tempResolutionSelect.getValue());
          // exportImCollSize.evaluate(function(number){
            var numFiles=Math.ceil(exportImCollSize/5000);  //number of files to export
            print(numFiles,'numFiles')
            for (var k=0;k<numFiles;k++){
              var fileInd=k;
              if (k===0){
                fileInd='';
              }
              var exportBandNames;
              var propertySelectors=[];
              var modelName=ee.Image(ee.List(exportImCollList).get(0)).get('model');
              if(tempResolutionSelect.getValue()!=='Daily'){
                exportBandNames=ee.ImageCollection(ee.List(exportImCollList).slice(k*5000,(k+1)*5000))
                                  .map(function(im){
                                    return ee.Feature(null).set('model',modelName,
                                                                'timestep',timestepLabel,
                                                                'dateStart',ee.Date(ee.Image(im).get('system:time_start')).format('YYYY-MM-dd HHmm'),
                                                                'dateEnd',ee.Date(ee.Image(im).get('system:time_end')).advance(-1,'day').format('YYYY-MM-dd HHmm'));
                                  });
                propertySelectors=['system:index','dateStart','dateEnd','timestep','model'];
              } else {
                exportBandNames=ee.ImageCollection(ee.List(exportImCollList).slice(k*5000,(k+1)*5000))
                                  .map(function(im){
                                    return ee.Feature(null).set('model',modelName,
                                                                'timestep',timestepLabel,
                                                                'dateStart',ee.Date(ee.Image(im).get('system:time_start')).format('YYYY-MM-dd HHmm'));
                                  });
                propertySelectors=['system:index','dateStart','timestep'];
              }
            var modelDescription1=ee.String(modelDescription).getInfo()
            //Export table of datestamps
            Export.table.toDrive({
              collection:ee.FeatureCollection(exportBandNames),
              description:scenario+'_'+modelDescription1+'_'+startDateBox.getValue()+'_to_'+endDateBox.getValue()+'_'+tempResolutionSelect.getValue()+'_bandDateInfo'+fileInd,
              fileFormat:'CSV',
              selectors:propertySelectors
            });
            
            //Export raster data
            for(var j=0;j<result.length;j++){
              var imToExport=ee.ImageCollection(ee.List(exportImCollList).slice(k*5000,(k+1)*5000))
                              .filter(ee.Filter.listContains("system:band_names", result[j]))
                              .aside(print).select(result[j])//.limit().toBands();
              var imToExportStdDev
              if(checkEnsembleStDev.getValue()===true){
                imToExportStdDev=ee.ImageCollection(ee.List(exportImCollStdDevList).slice(k*5000,(k+1)*5000))
                              .filter(ee.Filter.listContains("system:band_names", result[j]))
                              .aside(print).select(result[j])//.limit()
                              .toBands();
              }
              
              Export.image.toDrive({
                image:ee.Image(imToExport),
                crs:'EPSG:4326',
                crsTransform:[0.25,0,-180,0,-0.25,90],
                region:geometry,//exportInfo[2],
                maxPixels:1e13,
                // skipEmptyTiles:true,
                // fileFormat:'GeoTIFF',
                description:scenario+'_'+modelDescription1+'_'+startDateBox.getValue()+'_to_'+endDateBox.getValue()+'_'+tempResolutionSelect.getValue()+'_'+result[j]+fileInd
              });
              
              if(checkEnsembleStDev.getValue()===true){
                Export.image.toDrive({
                  image:ee.Image(imToExportStdDev),
                  crs:'EPSG:4326',
                  crsTransform:[0.25,0,-180,0,-0.25,90],
                  region:geometry,//exportInfo[2],
                  maxPixels:1e13,
                  // skipEmptyTiles:true,
                  // fileFormat:'GeoTIFF',
                  description:'StdDev_'+scenario+'_'+modelDescription1+'_'+startDateBox.getValue()+'_to_'+endDateBox.getValue()+'_'+tempResolutionSelect.getValue()+'_'+result[j]+fileInd
                });
              }
            }
            }
            
          
    }
    loadingPanel.style().set('shown',false);
    exportRasterInfoPanel.style().set('shown',true);
    });
    });
  });

}

var clearMapButton=ui.Button({label:'Reset',style:{stretch:'horizontal',margin: '1px 1px 1px 1px',width:'95%'}});
var clearMapPanel=ui.Panel({
    style: {
    position: 'bottom-right',
    width:'14%'
    }
  });
clearMapPanel.add(clearMapButton);
clearMapButton.onClick(function(){
  restartScript();
});

print('Hello! Welcome to GEECE!');
print('Once data have been identified for',
      'download, the export task(s) can be',
      'initiated by navigating to the "Tasks"',
      'tab above and clicking "Run". Once the',
      'export task has completed (when it',
      'turns blue), the data can be found in',
      'your Google Drive.');
restartScript();



  
  
